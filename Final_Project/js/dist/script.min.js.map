{"version":3,"sources":["script.js"],"names":["window","onscroll","scrollFunction","scrollTop","document","documentElement","getElementById","style","padding","backgroundColor","width","man","guessInput","guess","guessButton","lettersGuessed","lettersMatched","output","letters","lives","currentWord","numLettersMatched","messages","setup","value","i","display","win","innerHTML","letter","validLetter","words","Math","floor","random","length","classList","charAt","toUpperCase","insertAdjacentHTML","add","lose","indexOf","onload","onclick","this","onsubmit","e","remove","availableLetters","guessed","gameOver","lettersToShow","querySelectorAll","j","querySelector","winningConditions","playerDisplay","roundWon","concat","currentPlayer","innerText","isGameActive","type","PLAYERO_WON","announcer","includes","PLAYERX_WON","isValidAction","updateBoard","index","Array","announce","TIE","addEventListener","resetButton","tile","board","forEach","winCondition","userAction","c","a","b","handleResultValidation","changePlayer","tiles"],"mappings":"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","file":"script.min.js","sourcesContent":["//NAVBAR SCROLL\r\nwindow.onscroll = function() {scrollFunction()};\r\n\r\nfunction scrollFunction() {\r\n  if (document.body.scrollTop > 50 || document.documentElement.scrollTop > 50) {\r\n    document.getElementById(\"navbar\").style.padding = \"30px 10px\";\r\n    document.getElementById(\"navbar\").style.backgroundColor = \"rgba(255, 255, 255, 0.9)\";\r\n    document.getElementById(\"logo\").style.width = \"20vw\";\r\n  } else {\r\n    document.getElementById(\"navbar\").style.padding = \"80px 10px\";\r\n    document.getElementById(\"navbar\").style.backgroundColor = \"rgba(255, 255, 255, 0.0)\";\r\n    document.getElementById(\"logo\").style.width = \"40vw\";\r\n  }\r\n}\r\n\r\n//TITLE ANIMATION\r\n// var DynamicTitle = function(el, toRotate, period) {\r\n//     this.toRotate = toRotate;\r\n//     this.el = el;\r\n//     this.loopNum = 0;\r\n//     this.period = parseInt(period, 10) || 2000;\r\n//     this.txt = '';\r\n//     this.tick();\r\n//     this.isDeleting = false;\r\n//   };\r\n  \r\n//   DynamicTitle.prototype.tick = function() {\r\n//     var i = this.loopNum % this.toRotate.length;\r\n//     var fullTxt = this.toRotate[i];\r\n  \r\n//     if (this.isDeleting) {\r\n//       this.txt = fullTxt.substring(0, this.txt.length - 1);\r\n//     } else {\r\n//       this.txt = fullTxt.substring(0, this.txt.length + 1);\r\n//     }\r\n  \r\n//     this.el.innerHTML = '<span class=\"wrap\">'+this.txt+'</span>';\r\n  \r\n//     var that = this;\r\n//     var delta = 300 - Math.random() * 100;\r\n  \r\n//     if (this.isDeleting) { delta /= 2; }\r\n  \r\n//     if (!this.isDeleting && this.txt === fullTxt) {\r\n//       delta = this.period;\r\n//       this.isDeleting = true;\r\n//     } else if (this.isDeleting && this.txt === '') {\r\n//       this.isDeleting = false;\r\n//       this.loopNum++;\r\n//       delta = 500;\r\n//     }\r\n  \r\n//     setTimeout(function() {\r\n//       that.tick();\r\n//     }, delta);\r\n//   };\r\n  \r\n//   window.onload = function() {\r\n//     var elements = document.getElementsByClassName('dynamic-title');\r\n//     for (var i=0; i<elements.length; i++) {\r\n//       var toRotate = elements[i].getAttribute('data-rotate');\r\n//       var period = elements[i].getAttribute('data-period');\r\n//       if (toRotate) {\r\n//         new TxtRotate(elements[i], JSON.parse(toRotate), period);\r\n//       }\r\n//     }\r\n//     // INJECT CSS\r\n//     var css = document.createElement(\"style\");\r\n//     css.type = \"text/css\";\r\n//     css.innerHTML = \".dynamic-title > .wrap { border-right: 0.08em solid #666 }\";\r\n//     document.body.appendChild(css);\r\n//   };\r\n\r\n\r\n\r\n\r\n\r\n\r\n// var text = [\"TIC TAC TOE\", \"HANGMAN\", \"ROCK PAPER SCISSORS\"];\r\n// var counter = 0;\r\n// var elem = document.getElementById(\"game-name\");\r\n// setInterval(change, 3000);\r\n// function change() {\r\n//  elem.innerHTML = text[counter];\r\n//         counter++;\r\n//         if(counter >= text.length) { counter = 0; }\r\n// }\r\n\r\n\r\n// var game = new Array(\"TIC TAC TOE\", \"HANGMAN\", \"ROCK PAPER SCISSORS\");\r\n\r\n// var counter = 0;\r\n// document.getElementById('game-name').innerHTML = game[counter];\r\n\r\n// Changegame1();\r\n// function Changegame1(){\r\n//   incrementIndex()\r\n//   document.getElementById('game-name1').innerHTML = game[counter];\r\n\r\n//   document.getElementById('game-name').style.opacity = 0;\r\n \r\n//   document.getElementById('game-name1').style.opacity = 1;\r\n\r\n//   setTimeout(Changegame, 2000);\r\n// }\r\n// function Changegame(){\r\n//   incrementIndex();\r\n//   document.getElementById('game-name').innerHTML = greet[counter];\r\n \r\n//   document.getElementById('game-name').style.opacity = 1;\r\n \r\n//   document.getElementById('game-name1').style.opacity = 0;\r\n \r\n//   setTimeout(Changegame1, 2000);\r\n// }\r\n// function incrementIndex(){\r\n//   if(counter < greet.length - 1 ){\r\n//     counter++;\r\n//   }else{\r\n//     counter = 0;\r\n//   }\r\n// }\r\n\r\n\r\n\r\n// //TITLE ANIMATION\r\n// const text = document.querySelector(\".dynamic\");\r\n// const typer = (str, target) => {\r\n//   let newText = \"\";\r\n//   let step = 1;\r\n//   const element = target;\r\n//   const tic = setInterval(() => {\r\n//     if (step === str.length) clearInterval(tic);\r\n//     newText += str.slice(step - 1, step);\r\n//     step += 1;\r\n//     element.innerHTML = newText;\r\n//   }, 100);\r\n// };\r\n\r\n// const handler = (timer) => {\r\n//   let counter = 0;\r\n//   const arrayOfText = [\"HANGMAN\", \"ROCK PAPER SCISSORS\"];\r\n//   const change = () => {\r\n//     typer(arrayOfText[counter], text);\r\n//     counter += 1;\r\n//     if (counter >= arrayOfText.length) counter = 0;\r\n//   };\r\n//   setInterval(change, timer);\r\n// };\r\n\r\n// window.addEventListener(\"load\", handler(2000));\r\n\r\n\r\n\r\n//HANGMAN GAME//\r\n(function () {\r\n    \"use strict\";\r\n    var availableLetters, words, guessInput, guess, guessButton, lettersGuessed, lettersMatched, output, man, letters, lives, currentWord, numLettersMatched, messages;\r\n\r\n    function setup() {\r\n        /* start config options */\r\n        availableLetters = \"abcdefghijklmnopqrstuvwxyz\";\r\n        lives = 5;\r\n        words = [\"pizza\", \"chocolate\", \"peppermint\", \"water\"];\r\n        messages = {\r\n            win: 'You win!',\r\n            lose: 'Game over!',\r\n            guessed: ' already guessed, please try again...',\r\n            validLetter: 'Please enter a letter from A-Z'\r\n        };\r\n        /* end config options */\r\n\r\n        lettersGuessed = lettersMatched = '';\r\n        numLettersMatched = 0;\r\n\r\n        /* choose a word */\r\n        currentWord = words[Math.floor(Math.random() * words.length)];\r\n\r\n        /* make #man and #output blank, create vars for later access */\r\n        output = document.getElementById(\"output\");\r\n        man = document.getElementById(\"man\");\r\n        guessInput = document.getElementById(\"letter\");\r\n\r\n        man.innerHTML = 'You have ' + lives + ' lives remaining';\r\n        output.innerHTML = '';\r\n\r\n        document.getElementById(\"letter\").value = '';\r\n\r\n        /* make sure guess button is enabled */\r\n        guessButton = document.getElementById(\"guess\");\r\n        guessInput.style.display = 'flex';\r\n        guessButton.style.display = 'flex';\r\n\r\n        /* set up display of letters in current word */\r\n        letters = document.getElementById(\"letters\");\r\n        letters.innerHTML = '<li class=\"current-word\">Current word:</li>';\r\n\r\n        var letter, i;\r\n        for (i = 0; i < currentWord.length; i++) {\r\n            letter = '<li class=\"letter letter' + currentWord.charAt(i).toUpperCase() + '\">' + currentWord.charAt(i).toUpperCase() + '</li>';\r\n            letters.insertAdjacentHTML('beforeend', letter);\r\n        }\r\n    }\r\n\r\n    function gameOver(win) {\r\n        if (win) {\r\n            output.innerHTML = messages.win;\r\n            output.classList.add('win');\r\n        } else {\r\n            output.innerHTML = messages.lose;\r\n            output.classList.add('error');\r\n        }\r\n\r\n        guessInput.style.display = guessButton.style.display = 'none';\r\n        guessInput.value = '';\r\n    }\r\n\r\n    /* Start game - should ideally check for existing functions attached to window.onload */\r\n    window.onload = setup();\r\n\r\n    /* buttons */\r\n    document.getElementById(\"restart\").onclick = setup;\r\n\r\n    /* reset letter to guess on click */\r\n    guessInput.onclick = function () {\r\n        this.value = '';\r\n    };\r\n\r\n    /* main guess function when user clicks #guess */\r\n    document.getElementById('hangman').onsubmit = function (e) {\r\n        if (e.preventDefault) e.preventDefault();\r\n        output.innerHTML = '';\r\n        output.classList.remove('error', 'warning');\r\n        guess = guessInput.value;\r\n\r\n        /* does guess have a value? if yes continue, if no, error */\r\n        if (guess) {\r\n            /* is guess a valid letter? if so carry on, else error */\r\n            if (availableLetters.indexOf(guess) > -1) {\r\n                /* has it been guessed (missed or matched) already? if so, abandon & add notice */\r\n                if ((lettersMatched && lettersMatched.indexOf(guess) > -1) || (lettersGuessed && lettersGuessed.indexOf(guess) > -1)) {\r\n                    output.innerHTML = '\"' + guess.toUpperCase() + '\"' + messages.guessed;\r\n                    output.classList.add(\"warning\");\r\n                }\r\n                /* does guess exist in current word? if so, add to letters already matched, if final letter added, game over with win message */\r\n                else if (currentWord.indexOf(guess) > -1) {\r\n                    var lettersToShow;\r\n                    lettersToShow = document.querySelectorAll(\".letter\" + guess.toUpperCase());\r\n\r\n                    for (var i = 0; i < lettersToShow.length; i++) {\r\n                        lettersToShow[i].classList.add(\"correct\");\r\n                    }\r\n\r\n                    /* check to see if letter appears multiple times */\r\n                    for (var j = 0; j < currentWord.length; j++) {\r\n                        if (currentWord.charAt(j) === guess) {\r\n                            numLettersMatched += 1;\r\n                        }\r\n                    }\r\n\r\n                    lettersMatched += guess;\r\n                    if (numLettersMatched === currentWord.length) {\r\n                        gameOver(true);\r\n                    }\r\n                }\r\n                /* guess doesn't exist in current word and hasn't been guessed before, add to lettersGuessed, reduce lives & update user */\r\n                else {\r\n                    lettersGuessed += guess;\r\n                    lives--;\r\n                    man.innerHTML = 'You have ' + lives + ' lives remaining';\r\n                    if (lives === 0) gameOver();\r\n                }\r\n            }\r\n            /* not a valid letter, error */\r\n            else {\r\n                output.classList.add('error');\r\n                output.innerHTML = messages.validLetter;\r\n            }\r\n        }\r\n        /* no letter entered, error */\r\n        else {\r\n            output.classList.add('error');\r\n            output.innerHTML = messages.validLetter;\r\n        }\r\n        return false;\r\n    };\r\n}());\r\n\r\n\r\n\r\n//TIC TAC TOE GAME//\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n    const tiles = Array.from(document.querySelectorAll('.tile'));\r\n    const playerDisplay = document.querySelector('.display-player');\r\n    const resetButton = document.querySelector('#reset');\r\n    const announcer = document.querySelector('.announcer');\r\n\r\n    let board = ['', '', '', '', '', '', '', '', ''];\r\n    let currentPlayer = 'X';\r\n    let isGameActive = true;\r\n\r\n    const PLAYERX_WON = 'PLAYERX_WON';\r\n    const PLAYERO_WON = 'PLAYERO_WON';\r\n    const TIE = 'TIE';\r\n\r\n    const winningConditions = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n     ];\r\n\r\n    const isValidAction = (tile) => {\r\n        if (tile.innerText === 'X' || tile.innerText === 'O'){\r\n            return false;\r\n        }\r\n    \r\n        return true;\r\n    };\r\n\r\n    const updateBoard =  (index) => {\r\n        board[index] = currentPlayer;\r\n    }\r\n\r\n    const changePlayer = () => {\r\n        playerDisplay.classList.remove(`player${currentPlayer}`);\r\n        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';\r\n        playerDisplay.innerText = currentPlayer;\r\n        playerDisplay.classList.add(`player${currentPlayer}`);\r\n    }\r\n\r\n    const announce = (type) => {\r\n        switch(type){\r\n           case PLAYERO_WON:\r\n                announcer.innerHTML = 'Player <span class=\"playerO\">O</span> Won';\r\n                break;\r\n           case PLAYERX_WON:\r\n                announcer.innerHTML = 'Player <span class=\"playerX\">X</span> Won';\r\n                break;\r\n           case TIE:\r\n                announcer.innerText = 'Tie';\r\n            }\r\n        announcer.classList.remove('hide');\r\n    };\r\n\r\n    function handleResultValidation() {\r\n        let roundWon = false;\r\n        for (let i = 0; i <= 7; i++) {\r\n          const winCondition = winningConditions[i];\r\n          const a = board[winCondition[0]];\r\n          const b = board[winCondition[1]];\r\n          const c = board[winCondition[2]];\r\n          if (a === \"\" || b === \"\" || c === \"\") {\r\n            continue;\r\n          }\r\n          if (a === b && b === c) {\r\n            roundWon = true;\r\n            break;\r\n          }\r\n        }\r\n      \r\n        if (roundWon) {\r\n          announce(currentPlayer === \"X\" ? PLAYERX_WON : PLAYERO_WON);\r\n          isGameActive = false;\r\n          return;\r\n        }\r\n      \r\n        if (!board.includes(\"\")) announce(TIE);\r\n      }\r\n\r\n      const userAction = (tile, index) => {\r\n        if (isValidAction(tile) && isGameActive) {\r\n          tile.innerText = currentPlayer;\r\n          tile.classList.add(`player${currentPlayer}`);\r\n          updateBoard(index);\r\n          handleResultValidation();\r\n          changePlayer();\r\n        }\r\n      };\r\n\r\n    tiles.forEach( (tile, index) => {\r\n        tile.addEventListener('click', () => userAction(tile, index));\r\n    });\r\n\r\n    const resetBoard = () => {\r\n        board = ['', '', '', '', '', '', '', '', ''];\r\n        isGameActive = true;\r\n        announcer.classList.add('hide');\r\n    \r\n        if (currentPlayer === 'O') {\r\n            changePlayer();\r\n        }\r\n    \r\n        tiles.forEach(tile => {\r\n            tile.innerText = '';\r\n            tile.classList.remove('playerX');\r\n            tile.classList.remove('playerO');\r\n        });\r\n    }\r\n\r\n    resetButton.addEventListener('click', resetBoard);\r\n\r\n  });"]}